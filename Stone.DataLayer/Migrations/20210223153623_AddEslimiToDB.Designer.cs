// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stone.DataLayer.Context;

namespace Stone.DataLayer.Migrations
{
    [DbContext(typeof(StoneContext))]
    [Migration("20210223153623_AddEslimiToDB")]
    partial class AddEslimiToDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0-rc.2.20475.6");

            modelBuilder.Entity("Stone.DataLayer.Entities.Admin.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Stone.DataLayer.Entities.Product.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProductImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProductTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartingPrice")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Stone.DataLayer.Entities.Product.ProductImage", b =>
                {
                    b.Property<int>("ProductImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("SubProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductImageID");

                    b.HasIndex("SubProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Stone.DataLayer.Entities.Product.SubProd", b =>
                {
                    b.Property<int>("subProdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Length")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SubProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("SubProductImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SubProductPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubProductPriceDiscount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubProductTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Width")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("height")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("subProdId");

                    b.HasIndex("ProductId");

                    b.ToTable("SubProds");
                });

            modelBuilder.Entity("Stone.DataLayer.Entities.Product.SubProduct", b =>
                {
                    b.Property<int>("SubProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Length")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SubProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("SubProductImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SubProductPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubProductPriceDiscount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubProductTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Width")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("height")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubProductId");

                    b.ToTable("SubProduct");
                });

            modelBuilder.Entity("Stone.DataLayer.Entities.User.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AvtiveCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsAtive")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UserBan")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Stone.DataLayer.Entities.Product.ProductImage", b =>
                {
                    b.HasOne("Stone.DataLayer.Entities.Product.SubProduct", "subProduct")
                        .WithMany()
                        .HasForeignKey("SubProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("subProduct");
                });

            modelBuilder.Entity("Stone.DataLayer.Entities.Product.SubProd", b =>
                {
                    b.HasOne("Stone.DataLayer.Entities.Product.Product", "product")
                        .WithMany("subProds")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("Stone.DataLayer.Entities.Product.Product", b =>
                {
                    b.Navigation("subProds");
                });
#pragma warning restore 612, 618
        }
    }
}
